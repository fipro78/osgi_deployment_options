<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.fipro.service</groupId>
    <artifactId>service-application</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>app.criu</artifactId>

  <dependencies>

    <!-- The OSGi framework is Equinox -->
    <dependency>
      <groupId>org.eclipse.platform</groupId>
      <artifactId>org.eclipse.osgi</artifactId>
    </dependency>

    <!-- Declarative Services -->
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.service.component</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.scr</artifactId>
    </dependency>

    <!-- Configuration Admin -->
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.service.cm</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.configadmin</artifactId>
    </dependency>

    <!-- Event Admin -->
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.service.event</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.platform</groupId>
      <artifactId>org.eclipse.equinox.event</artifactId>
    </dependency>

    <!--  OSGi Function  -->
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.util.function</artifactId>
    </dependency>
    <!--  OSGi Promise  -->
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.util.promise</artifactId>
    </dependency>

    <!-- The Gogo Shell -->
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.gogo.command</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.gogo.runtime</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.gogo.shell</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Application Bundles -->
    <dependency>
      <groupId>org.fipro.service</groupId>
      <artifactId>api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.fipro.service</groupId>
      <artifactId>impl</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.fipro.service</groupId>
      <artifactId>command</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.fipro.service</groupId>
      <artifactId>configurable</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.fipro.service</groupId>
      <artifactId>eventhandler</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>zorg.fipro.osgi</groupId>
      <artifactId>benchmark.criu</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Atomos -->
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.atomos</artifactId>
      <version>1.0.0</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.felix.atomos</groupId>
      <artifactId>osgi.core</artifactId>
      <classifier>AtomosEquinox</classifier>
      <version>8.0.0</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>bnd-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>bnd-indexer-maven-plugin</artifactId>
        <configuration>
          <includeJar>true</includeJar>
        </configuration>
      </plugin>
      <plugin>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>bnd-resolver-maven-plugin</artifactId>
        <configuration>
          <bndruns>
            <bndrun>equinox-app.bndrun</bndrun>
            <bndrun>atomos-equinox-app.bndrun</bndrun>
          </bndruns>
        </configuration>
      </plugin>
      <!-- export an OSGi application as a runnable JAR -->
      <plugin>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>bnd-export-maven-plugin</artifactId>
        <configuration>
          <bndruns>
            <bndrun>equinox-app.bndrun</bndrun>
            <bndrun>atomos-equinox-app.bndrun</bndrun>
          </bndruns>
        </configuration>
      </plugin>

      <!-- export OSGi application in folder structure -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.6.0</version>
        <executions>
          <!-- load the dependencies -->
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deps</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <executions>

          <!-- copy resources (application jars, configuration, equinox) to folder based application structure -->
          <execution>
            <id>copy-configuration</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/equinox_folder</directory>
                  <excludes>
                    <exclude>**/*.bat</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-plugins</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based/app/plugins</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/deps</directory>
                  <excludes>
                    <exclude>org.eclipse.osgi-*.jar</exclude>
                    <exclude>org.osgi.namespace.implementation-1.0.0.jar</exclude>
                    <exclude>org.osgi.service.cm-*.jar</exclude>
                    <exclude>osgi.annotation-*.jar</exclude>
                    <exclude>org.apache.felix.atomos-*.jar</exclude>
                    <exclude>osgi.core-*-AtomosEquinox.jar</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-equinox</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based/app</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/deps</directory>
                  <includes>
                    <include>org.eclipse.osgi-3.18.500.jar</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-etc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based/app/etc</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/etc</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-init-scc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based/app</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>init_scc_size.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- copy executable jar in docker build context folder -->
          <execution>
            <id>copy-executable</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/executable</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>equinox-app.jar</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-scripts</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/executable</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/equinox_executable</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-etc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/executable/etc</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/etc</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-init-scc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/executable</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>init_scc_size.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- copy executable jar in jlink docker build context folder -->
          <execution>
            <id>copy-executable-jlink</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>equinox-app.jar</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-jlink-scripts</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/equinox_jlink</directory>
                  <includes>
                    <include>**/*.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-jlink-etc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink/etc</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/etc</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-jlink-init-scc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>init_scc_size.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- copy configuration and applications jars for Atomos folder distribution -->
          <execution>
            <id>copy-configuration-atomos</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based_atomos</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/equinox_folder_atomos</directory>
                  <excludes>
                    <exclude>**/*.bat</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-plugins-atomos</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based_atomos/app/bundles</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/deps</directory>
                  <excludes>
                    <exclude>org.osgi.namespace.implementation-1.0.0.jar</exclude>
                    <exclude>org.osgi.service.cm-*.jar</exclude>
                    <exclude>osgi.annotation-*.jar</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-etc-atomos</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based_atomos/app/etc</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/etc</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-atomos-init-scc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/folder_based_atomos/app</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>init_scc_size.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- copy executable atomos jar in docker build context folder -->
          <!-- Bnd created executable jar with Atomos is not working: https://github.com/bndtools/bnd/issues/5243
          <execution>
            <id>copy-executable-atomos</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/executable_atomos</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>atomos-equinox-app.jar</include>
                  </includes>
                </resource>
              </resources>              
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-etc-atomos</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/executable_atomos/etc</outputDirectory>
              <resources>          
                <resource>
                  <directory>src/main/resources/etc</directory>
                </resource>
              </resources>        
            </configuration>            
          </execution>
          -->

          <!-- copy executable atomos jar and configuration in docker build context folder for jlink -->
          <execution>
            <id>copy-executable-jlink-atomos</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink_atomos</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>atomos-equinox-app.jar</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-jlink-atomos-scripts</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink_atomos</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/equinox_jlink</directory>
                  <includes>
                    <include>**/*.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-jlink-atomos-etc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink_atomos/etc</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/etc</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-executable-jlink-atomos-init-scc</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/deployment/jlink_atomos</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <includes>
                    <include>init_scc_size.sh</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <!-- build docker images -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <images combine.children="append">
		  <!--
			<image>
			  <name>osgi-deployment-folder-%a:17_openj9_criu</name>
			  <alias>folder_based_17_openj9_criu</alias>
			  <build>
				<dockerFile>${project.basedir}/src/main/docker/executable_criu/Dockerfile</dockerFile>
				<contextDir>${project.build.directory}/deployment/folder_based</contextDir>
				<args>
				  <IMAGE_NAME>ibm-semeru-runtimes</IMAGE_NAME>
				  <VERSION>open-17-jre-jammy</VERSION>
				  <JAVA_OPTS_EXTRA>-Xshareclasses:name=app_cache,cacheDir=/app/.scc</JAVA_OPTS_EXTRA>
				</args>
			  </build>
			</image>
			-->
            <image>
              <name>osgi-deployment-executable-%a:17_openj9_criu</name>
              <alias>executable_17_openj9_criu</alias>
              <build>
                <dockerFile>${project.basedir}/src/main/docker/executable_debian/Dockerfile</dockerFile>
                <contextDir>${project.build.directory}/deployment/executable</contextDir>
                <args>
                  <IMAGE_NAME>ibm-semeru-runtimes</IMAGE_NAME>
                  <VERSION>open-17-jre-jammy</VERSION>
                  <EXECUTABLE_JAR>equinox-app.jar</EXECUTABLE_JAR>
                  <JAVA_OPTS_EXTRA>-XX:+EnableCRIUSupport</JAVA_OPTS_EXTRA>
                </args>
              </build>
            </image>
          </images>
          <!-- use the image alias as container name on start -->
          <containerNamePattern>%a</containerNamePattern>
        </configuration>

        <!-- Connect start/stop to pre- and
         post-integration-test phase, respectively if you want to start
         your docker containers during integration tests -->
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <!-- "build" is used to create the images with the artifact -->
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>